/******************************************************************************
 * Scalable and Modular Architecture for CSS
 *
 * This is a demo project utilizing the smacss ideology. You can find out more
 *  about smacss by visiting: https://smacss.com/
 *
 * There are five types of categories:
 *  1. Base
 *  2. Layout
 *  3. Module
 *  4. State
 *  5. Theme
 *****************************************************************************/
/******************************************************************************
 * Globals
 *****************************************************************************/
/******************************************************************************
 * Base
 *
 * Base rules are the defaults. They are almost exclusively single element
 *  selectors but it could include attribute selectors, pseudo-class selectors,
 *  child selectors. Essentially, a base style says that wherever this element
 *  is on the page, it should look like this.
 *
 * Examples of Base Styles:
 *  html, body, form { margin: 0; padding: 0; }
 *  input[type=text] { border: 1px solid #999; }
 *  a { color: #039; }
 *  a:hover { color: #03C; }
 *****************************************************************************/
body {
  background: #fafafa;
  font-family: "Roboto", "Helvetica Neue", Helvetica, Arial, sans-serif;
  color: #333; }

/******************************************************************************
 * Layout
 *
 * Layout rules divide the page into sections. Layouts hold one or more
 *  modules together.
 *****************************************************************************/
/******************************************************************************
 * Module
 *
 * Modules are the reusable, modular parts of our design. They are the
 *  callouts, the sidebar sections, the products lists and so on.
 *****************************************************************************/
/******************************************************************************
 * State
 *
 * State rules are ways to describe how our modules or layouts will look when
 *  in a particular state. Is it hidden or expanded? Is it active or inactive?
 *  They are about describing how a module or layout looks on screens that are
 *  smaller or bigger. They are also about describing how a module might look
 *  in different views like the home page or the inside page.
 *****************************************************************************/
.is-hidden {
  display: none; }

.is-error {
  color: #dd2c00; }

/******************************************************************************
 * Theme
 *
 * Theme rules are similar to state rules in that they describe how modules or
 *  layouts might look. Most sites don't require a layer of theming but it is
 *  good to be aware of it.
 *****************************************************************************/
.page-title {
  outline: none; }

paper-material {
  -webkit-border-radius: 25px !important;
  -moz-border-radius: 25px !important;
  border-radius: 25px !important; }
